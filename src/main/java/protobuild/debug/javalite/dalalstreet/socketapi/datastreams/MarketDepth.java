// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastreams/MarketDepth.proto

package dalalstreet.socketapi.datastreams;

public final class MarketDepth {
  private MarketDepth() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface MarketDepthUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dalalstreet.socketapi.datastreams.MarketDepthUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    int getStockId();

    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    int getAskDepthCount();
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    boolean containsAskDepth(
        int key);
    /**
     * Use {@link #getAskDepthMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getAskDepth();
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getAskDepthMap();
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    int getAskDepthOrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    int getAskDepthOrThrow(
        int key);

    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    int getBidDepthCount();
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    boolean containsBidDepth(
        int key);
    /**
     * Use {@link #getBidDepthMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getBidDepth();
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getBidDepthMap();
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    int getBidDepthOrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    int getBidDepthOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code dalalstreet.socketapi.datastreams.MarketDepthUpdate}
   */
  public  static final class MarketDepthUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          MarketDepthUpdate, MarketDepthUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:dalalstreet.socketapi.datastreams.MarketDepthUpdate)
      MarketDepthUpdateOrBuilder {
    private MarketDepthUpdate() {
    }
    private int bitField0_;
    public static final int STOCK_ID_FIELD_NUMBER = 1;
    private int stockId_;
    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    public int getStockId() {
      return stockId_;
    }
    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    private void setStockId(int value) {
      
      stockId_ = value;
    }
    /**
     * <code>optional uint32 stock_id = 1;</code>
     */
    private void clearStockId() {
      
      stockId_ = 0;
    }

    public static final int ASK_DEPTH_FIELD_NUMBER = 2;
    private static final class AskDepthDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> askDepth_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetAskDepth() {
      return askDepth_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableAskDepth() {
      if (!askDepth_.isMutable()) {
        askDepth_ = askDepth_.mutableCopy();
      }
      return askDepth_;
    }

    public int getAskDepthCount() {
      return internalGetAskDepth().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public boolean containsAskDepth(
        int key) {
      
      return internalGetAskDepth().containsKey(key);
    }
    /**
     * Use {@link #getAskDepthMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getAskDepth() {
      return getAskDepthMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public java.util.Map<java.lang.Integer, java.lang.Integer> getAskDepthMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetAskDepth());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public int getAskDepthOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetAskDepth();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */

    public int getAskDepthOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetAskDepth();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableAskDepthMap() {
      return internalGetMutableAskDepth();
    }

    public static final int BID_DEPTH_FIELD_NUMBER = 3;
    private static final class BidDepthDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.Integer, java.lang.Integer> bidDepth_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetBidDepth() {
      return bidDepth_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.Integer, java.lang.Integer>
    internalGetMutableBidDepth() {
      if (!bidDepth_.isMutable()) {
        bidDepth_ = bidDepth_.mutableCopy();
      }
      return bidDepth_;
    }

    public int getBidDepthCount() {
      return internalGetBidDepth().size();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public boolean containsBidDepth(
        int key) {
      
      return internalGetBidDepth().containsKey(key);
    }
    /**
     * Use {@link #getBidDepthMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getBidDepth() {
      return getBidDepthMap();
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public java.util.Map<java.lang.Integer, java.lang.Integer> getBidDepthMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetBidDepth());
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public int getBidDepthOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetBidDepth();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */

    public int getBidDepthOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetBidDepth();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
     */
    private java.util.Map<java.lang.Integer, java.lang.Integer>
    getMutableBidDepthMap() {
      return internalGetMutableBidDepth();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (stockId_ != 0) {
        output.writeUInt32(1, stockId_);
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
           : internalGetAskDepth().entrySet()) {
        AskDepthDefaultEntryHolder.defaultEntry.serializeTo(
            output, 2, entry.getKey(), entry.getValue());
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
           : internalGetBidDepth().entrySet()) {
        BidDepthDefaultEntryHolder.defaultEntry.serializeTo(
            output, 3, entry.getKey(), entry.getValue());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (stockId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stockId_);
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
           : internalGetAskDepth().entrySet()) {
        size += AskDepthDefaultEntryHolder.defaultEntry.computeMessageSize(
          2, entry.getKey(), entry.getValue());
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
           : internalGetBidDepth().entrySet()) {
        size += BidDepthDefaultEntryHolder.defaultEntry.computeMessageSize(
          3, entry.getKey(), entry.getValue());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code dalalstreet.socketapi.datastreams.MarketDepthUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:dalalstreet.socketapi.datastreams.MarketDepthUpdate)
        dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdateOrBuilder {
      // Construct using dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional uint32 stock_id = 1;</code>
       */
      public int getStockId() {
        return instance.getStockId();
      }
      /**
       * <code>optional uint32 stock_id = 1;</code>
       */
      public Builder setStockId(int value) {
        copyOnWrite();
        instance.setStockId(value);
        return this;
      }
      /**
       * <code>optional uint32 stock_id = 1;</code>
       */
      public Builder clearStockId() {
        copyOnWrite();
        instance.clearStockId();
        return this;
      }


      public int getAskDepthCount() {
        return instance.getAskDepthMap().size();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */

      public boolean containsAskDepth(
          int key) {
        
        return instance.getAskDepthMap().containsKey(key);
      }

      public Builder clearAskDepth() {
        copyOnWrite();
        instance.getMutableAskDepthMap().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */

      public Builder removeAskDepth(
          int key) {
        
        copyOnWrite();
        instance.getMutableAskDepthMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getAskDepthMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getAskDepth() {
        return getAskDepthMap();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */
      public java.util.Map<java.lang.Integer, java.lang.Integer> getAskDepthMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getAskDepthMap());
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */

      public int getAskDepthOrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getAskDepthMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */

      public int getAskDepthOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getAskDepthMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */
      public Builder putAskDepth(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableAskDepthMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; ask_depth = 2;</code>
       */
      public Builder putAllAskDepth(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableAskDepthMap().putAll(values);
        return this;
      }


      public int getBidDepthCount() {
        return instance.getBidDepthMap().size();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */

      public boolean containsBidDepth(
          int key) {
        
        return instance.getBidDepthMap().containsKey(key);
      }

      public Builder clearBidDepth() {
        copyOnWrite();
        instance.getMutableBidDepthMap().clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */

      public Builder removeBidDepth(
          int key) {
        
        copyOnWrite();
        instance.getMutableBidDepthMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getBidDepthMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getBidDepth() {
        return getBidDepthMap();
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */
      public java.util.Map<java.lang.Integer, java.lang.Integer> getBidDepthMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getBidDepthMap());
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */

      public int getBidDepthOrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getBidDepthMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */

      public int getBidDepthOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            instance.getBidDepthMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */
      public Builder putBidDepth(
          int key,
          int value) {
        
        
        copyOnWrite();
        instance.getMutableBidDepthMap().put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, uint32&gt; bid_depth = 3;</code>
       */
      public Builder putAllBidDepth(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        copyOnWrite();
        instance.getMutableBidDepthMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dalalstreet.socketapi.datastreams.MarketDepthUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          askDepth_.makeImmutable();
          bidDepth_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate other = (dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate) arg1;
          stockId_ = visitor.visitInt(stockId_ != 0, stockId_,
              other.stockId_ != 0, other.stockId_);
          askDepth_ = visitor.visitMap(
              askDepth_, other.internalGetAskDepth());
          bidDepth_ = visitor.visitMap(
              bidDepth_, other.internalGetBidDepth());
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  stockId_ = input.readUInt32();
                  break;
                }
                case 18: {
                  if (!askDepth_.isMutable()) {
                    askDepth_ = askDepth_.mutableCopy();
                  }
                  AskDepthDefaultEntryHolder.defaultEntry.parseInto(askDepth_, input, extensionRegistry);  break;
                }
                case 26: {
                  if (!bidDepth_.isMutable()) {
                    bidDepth_ = bidDepth_.mutableCopy();
                  }
                  BidDepthDefaultEntryHolder.defaultEntry.parseInto(bidDepth_, input, extensionRegistry);  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:dalalstreet.socketapi.datastreams.MarketDepthUpdate)
    private static final dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MarketDepthUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static dalalstreet.socketapi.datastreams.MarketDepth.MarketDepthUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MarketDepthUpdate> PARSER;

    public static com.google.protobuf.Parser<MarketDepthUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
